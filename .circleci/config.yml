version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  node: circleci/node@4.1.0
  aws-s3: circleci/aws-s3@2.0.0
  aws-cli: circleci/aws-cli@1.3.0
  slack: circleci/slack@3.4.2
executors:
  build-nodejs:
    docker:
      - image: 'cimg/node:12.16.3'
  test-nodejs:
    docker:
      - image: 'cimg/node:12.16.3'
      - image: '166848489525.dkr.ecr.us-east-1.amazonaws.com/redis:latest'
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
      - image: 'circleci/mongo:4.0.0'
      - image: 'rabbitmq:3.8.2-alpine'
        environment:
          RABBITMQ_DEFAULT_USER: guesty
          RABBITMQ_DEFAULT_PASS: bananasplit
      - image: 'consul:1.3.1'
s3_artifact_bucket:
  working_directory: ~/app
  docker:
    - image: 'cimg/node:12.16.3'
commands:
  authenticate_npm:
    description: Authenticate with Registry
    steps:
      - run:
          command: 'echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc'
  get_entity_from_package_json:
    description: Get entity from package.json
    steps:
      - run:
          command: >
            echo "export ENTITY=$(cat package.json | grep name | head -1 | awk
            -F: '{ print $2 }' | sed 's/[", ]//g')" >> $BASH_ENV
  generate_dockerfile_from_package_json:
    description: Get image from package.json and create basic docker file
    parameters:
      defaultImage:
        default: node-12.16.3
        description: The tag of the guesty base image
        type: string
      recRepo:
        type: string
        description: The base image repo account
    steps:
      - run:
          command: >
            BASE_IMAGE=$(cat package.json | grep baseImage | head -1 | awk -F:
            '{ print $2 }' | sed 's/[", ]//g')

            cat > ./Dockerfile \<< EOL

            FROM << parameters.recRepo >>/base:${BASE_IMAGE:=<<
            parameters.defaultImage >>}

            COPY . /app/

            EOL
      - run: cat ./Dockerfile
  get_node_env:
    description: Get entity from package.json
    steps:
      - run:
          command: >
            echo "export NODE_ENV=$([[ ${CIRCLE_BRANCH} = master ]] && echo
            production || echo staging)" >> $BASH_ENV

            echo "export ARTIFACT_CLASS=$([[ ${CIRCLE_BRANCH} = master ]] &&
            echo master || echo rc)" >> $BASH_ENV
  get_s3_bucket_url:
    description: 'The S3 bucket with build identifer path s3://'
    steps:
      - get_entity_from_package_json
      - get_node_env
      - run:
          command: |
            if [[ (${CIRCLE_BRANCH} = master) || (${CIRCLE_TAG} =~ ^master.) ]]
            then
              echo "export S3_BUCKET_URL=s3://${ARTIFACT_S3_BUCKET}/${ENTITY}/${ARTIFACT_CLASS}/<< pipeline.number >>  " >> $BASH_ENV
            else
              echo "export S3_BUCKET_URL=s3://${ARTIFACT_S3_BUCKET}/${ENTITY}/${ARTIFACT_CLASS}/<< pipeline.number >>" >> $BASH_ENV
            fi
  config_validation:
    description: validate .env file structure and hierarchy
    parameters:
      outputFileName:
        default: .env.final
        description: The name of the validate config file
        type: string
    steps:
      - run:
          command: >
            npm i dotenv-flow@3.1.0 --no-save --ignore-scripts --no-package-lock

            node -e "require('fs').writeFileSync('<< parameters.outputFileName
            >>',JSON.stringify(require('dotenv-flow').config({path:process.cwd()}).parsed)
            ||  process.exit(1))"
  notify_on_finish:
    description: send slack message on the relevant outcome of the relevat step
    parameters:
      buildType:
        description: 'type the deploy: config / manifest / code'
        type: enum
        enum:
          - code
          - manifest&config
          - config
          - manifest
      failOnly:
        description: if step should inform on success
        default: false
        type: boolean
    steps:
      - slack/status:
          mentions: $CIRCLE_USERNAME
          fail_only: << parameters.failOnly >>
          webhook: '${SLACK_WEBHOOK}'
          include_job_number_field: false
          success_message: "\U0001F389 Publish *<< parameters.buildType >>* artifact has succeeded! branch *${CIRCLE_TAG}${CIRCLE_BRANCH}* pipeline number *<< pipeline.number >>* $SLACK_MENTIONS"
          failure_message: "\U0001F534\U0001F534\U0001F534 Publish *<< parameters.buildType >>* artifact has Fail! branch *${CIRCLE_TAG}${CIRCLE_BRANCH}*  pipeline number *<< pipeline.number >>* $SLACK_MENTIONS"
jobs:
  build:
    executor:
      name: build-nodejs
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
      - authenticate_npm
      - run: npm install --no-save
      - run: npm run build
      - save_cache:
          key: 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
          paths:
            - ./node_modules
      - persist_to_workspace:
          root: .
          paths:
            - dist
      - notify_on_finish:
          buildType: code
          failOnly: true
  lint:
    executor:
      name: 'build-nodejs'
    steps:
      - checkout
      - run: git fetch --force --depth=1 origin master:master
      - restore_cache:
          keys:
            - 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
      - authenticate_npm
      - run: npm run pretty-check
      - run: npm run lint
      - notify_on_finish:
          buildType: code
          failOnly: true
  build-api-docs:
    executor:
      name: build-nodejs
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
      - attach_workspace:
          at: .
      - run: 'node ./node_modules/.bin/hydra-nest generateApiDocs'
      - persist_to_workspace:
          root: .
          paths:
            - api-documentation
  upload-api-docs:
    executor: build-nodejs
    steps:
      - checkout
      - attach_workspace:
          at: .
      - get_s3_bucket_url
      - aws-s3/sync:
          from: ./api-documentation
          to: '${S3_BUCKET_URL}/api-documentation'
          arguments: |
            --metadata=sha=$CIRCLE_SHA1,branch=$CIRCLE_BRANCH
  test-unit:
    executor:
      name: test-nodejs
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
      - attach_workspace:
          at: .
      - authenticate_npm
      - run: npm run test:unit:ci
      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output
      - notify_on_finish:
          buildType: code
          failOnly: true
  test-e2e:
    executor:
      name: test-nodejs
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
      - attach_workspace:
          at: .
      - authenticate_npm
      - run: npm run test:e2e:ci
      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output
      - notify_on_finish:
          buildType: code
          failOnly: true
  coverage:
    executor: build-nodejs
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
      - attach_workspace:
          at: .
      - run: npm run coverage
      - authenticate_npm
      - store_artifacts:
          path: coverage
      - run: npx @guestyci/coverager
      - notify_on_finish:
          buildType: code
          failOnly: true
  ecr-push:
    executor:
      name: build-nodejs
    steps:
      - checkout
      - get_entity_from_package_json
      - get_node_env
      - restore_cache:
          keys:
            - 'node-modules-cache-v1-{{ checksum "package-lock.json" }}'
      - attach_workspace:
          at: .
      - generate_dockerfile_from_package_json:
          recRepo: '${AWS_ECR_ACCOUNT_URL}'
      - run: cat Dockerfile
      - setup_remote_docker:
          docker_layer_caching: false
          reusable: false
          exclusive: false
      - aws-ecr/build-and-push-image:
          dockerfile: ./Dockerfile
          path: .
          account-url: AWS_ECR_ACCOUNT_URL
          create-repo: false
          repo: '${ENTITY}'
          tag: '${ARTIFACT_CLASS}-<< pipeline.number >>'
      - notify_on_finish:
          buildType: code
  manifest:
    executor:
      name: aws-cli/default
    steps:
      - checkout
      - get_s3_bucket_url
      - run:
          command: 'echo "Publish into ${S3_BUCKET_URL}/manifest.json"'
      - aws-s3/copy:
          from: manifest.json
          to: '${S3_BUCKET_URL}/manifest.json'
          arguments: |
            --metadata=sha=$CIRCLE_SHA1,branch=$CIRCLE_BRANCH
      - run: |
          if [ ! -d ./terraform ]; then
              circleci-agent step halt
          fi
      - aws-s3/sync:
          from: ./terraform
          to: '${S3_BUCKET_URL}/terraform'
          arguments: |
            --metadata=sha=$CIRCLE_SHA1,branch=$CIRCLE_BRANCH
  extrnal_config:
    executor:
      name: node/default
    steps:
      - checkout
      - get_s3_bucket_url
      - config_validation:
          outputFileName: config.json
      - aws-s3/copy:
          from: config.json
          to: '${S3_BUCKET_URL}/config.env'
          arguments: |
            --metadata=sha=$CIRCLE_SHA1,branch=$CIRCLE_BRANCH
  notify_on_finish_job:
    docker:
      - image: 'cibuilds/base:latest'
    resource_class: small
    steps:
      - notify_on_finish:
          buildType: manifest&config
workflows:
  version: 2
  Node build rc:
    jobs:
      - build:
          context: org-global-be
          filters:
            tags:
              only:
                - /.*build.*/
                - /.*code.*/
            branches:
              ignore: master
      - lint:
          context: org-global-be
          requires:
            - build
          filters:
            tags:
              only:
                - /.*build.*/
                - /.*code.*/
            branches:
              ignore: master
      - test-unit:
          context: org-global-be
          requires:
            - build
          filters:
            tags:
              only:
                - /.*build.*/
                - /.*code.*/
            branches:
              ignore: master
      - test-e2e:
          context: org-global-be
          requires:
            - build
          filters:
            tags:
              only:
                - /.*build.*/
                - /.*code.*/
            branches:
              ignore: master
      - coverage:
          context:
            - org-global-be
            - org-github-apps
          requires:
            - test-unit
            - test-e2e
          filters:
            tags:
              only:
                - /.*build.*/
                - /.*code.*/
            branches:
              ignore: master
      - ecr-push:
          context: org-global-be
          requires:
            - test-unit
            - test-e2e
          filters:
            tags:
              only:
                - /.*build.*/
                - /.*code.*/
            branches:
              ignore: master
  Metadata publish rc:
    jobs:
      - manifest:
          context: org-global-be
          filters:
            tags:
              only:
                - /.*manifest.*/
                - /.*build.*/
            branches:
              ignore: master
      - extrnal_config:
          context: org-global-be
          filters:
            tags:
              only:
                - /.*manifest.*/
                - /.*build.*/
            branches:
              ignore: master
      - notify_on_finish_job:
          context: org-global-be
          filters:
            tags:
              only:
                - /.*manifest.*/
                - /.*build.*/
            branches:
              ignore: master
          requires:
            - extrnal_config
            - manifest
  Node build master:
    jobs:
      - build:
          context: org-global-be
          filters:
            branches:
              only: master
      - test-unit:
          context: org-global-be
          requires:
            - build
          filters:
            branches:
              only: master
      - test-e2e:
          context: org-global-be
          requires:
            - build
          filters:
            branches:
              only: master
      - coverage:
          context:
            - org-global-be
            - org-github-apps
          requires:
            - test-unit
            - test-e2e
          filters:
            branches:
              only: master
      - ecr-push:
          context: org-global-be
          requires:
            - test-unit
            - test-e2e
          filters:
            branches:
              only: master
      - build-api-docs:
          context: org-global-be
          requires:
            - test-unit
            - test-e2e
            - test-swagger
          filters:
            branches:
              only:
                - master
      - upload-api-docs:
          context: org-global-be
          requires:
            - build-api-docs
          filters:
            branches:
              only:
                - master
  Metadata publish master:
    jobs:
      - manifest:
          context: org-global-be
          filters:
            branches:
              only: master
      - extrnal_config:
          context: org-global-be
          filters:
            branches:
              only: master
      - notify_on_finish_job:
          context: org-global-be
          filters:
            branches:
              only: master
          requires:
            - extrnal_config
            - manifest
